---
swagger: "2.0"
info:
  description: An API for the Sunglasses-io Store. For this sample, you can use the api key `88312679-04c9-4351-85ce-3ed75293b449` to test the authorization filters.
  version: 1.0.0
  title: Sunglasses-io
  termsOfService: ""
  contact:
    email: adholton@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: localhost:3001
basePath: /api
tags:
- name: Brands
  description: Access to sunglasses brands
- name: Products
  description: Access to sunglasses product types
- name: Login
  description: Logs in user to create new session and generate token
- name: User
  description: Access to user account (specifically for adding/modifying products in cart)
schemes:
- http
produces:
- application/json
paths:
  /brands:
    get:
      tags:
      - Brands
      summary: Get all brands of sunglasses
      description: |
        This endpoint will return an array of all available sunglasses brands
      operationId: getSunglassesBrands
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: operation successful, an array of sunglasses
          schema:
            type: array
            items:
              $ref: '#/definitions/Brands'
        "404":
          description: Brands not available
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
  /brands/{id}/products:
    get:
      tags:
      - Brands
      summary: Get product available for each brand
      description: |
        This endpoint will get all the products of a certain brand by including the brand id as a parameter
      operationId: getProductsBySunglassesBrandId
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: This brand id will be used to filter products available for that brand
        required: true
        type: string
      responses:
        "200":
          description: operation successful, an array products of a particular brand
          schema:
            type: array
            items:
              $ref: '#/definitions/Products'
        "400":
          description: Unable to complete request
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: No products found
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
  /products:
    get:
      tags:
      - Products
      summary: Gets product types
      description: |
        This endpoint will show all product types of sunglasses or only products matching the query
      operationId: getProducts
      produces:
      - application/json
      parameters:
      - name: query
        in: query
        description: Optional search query string. It can be a brand name or description of sunglasses the user wants to search for.
        required: false
        type: string
      responses:
        "200":
          description: operation successful, an array of all products (no query) or an array of products matching the query
          schema:
            type: array
            items:
              $ref: '#/definitions/Products'
        "404":
          description: No products found
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
  /login:
    post:
      tags:
      - Login
      summary: Logs in an already registered user
      description: |
        This endpoint will check the name and password to log the user in
      operationId: loginUser
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Username and password credentials will be passed in the body
        required: true
        schema:
          $ref: '#/definitions/Login'
      responses:
        "200":
          description: operation successful, user is logged in and access token is returned
          headers:
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
          schema:
            type: string
        "400":
          description: Incorrectly formatted response
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Invalid username or password
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
  /me/cart:
    get:
      tags:
      - User
      summary: Gets user's cart
      description: |
        This endpoint returns the user's cart, as an array, after they are already logged in
      operationId: getUserCart
      produces:
      - application/json
      parameters:
      - name: api_key
        in: header
        required: true
        type: string
      - name: accessToken
        in: query
        required: true
        type: string
      responses:
        "200":
          description: Operation successful, returns user's cart as an array
          schema:
            $ref: '#/definitions/User'
        "401":
          description: You need to have access to continue
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
      - sunglassesstore_auth:
        - write:itemsInCart
        - read:itemsInCart
    post:
      tags:
      - User
      summary: Add item to logged-in user's cart
      description: |
        Adds an item to authorized user's cart. The product to add will be sent in the request body.
      operationId: addItemToCart
      produces:
      - application/json
      parameters:
      - name: api_key
        in: header
        required: true
        type: string
      - name: accessToken
        in: query
        required: true
        type: string
      - in: body
        name: productId
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        "200":
          description: successful operation, product added to cart
          schema:
            $ref: '#/definitions/User'
        "401":
          description: You need to have access to continue
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
      - sunglassesstore_auth:
        - write:itemsInCart
        - read:itemsInCart
  /me/cart/{productId}:
    post:
      tags:
      - User
      summary: Change quantity of item in logged-in user's cart
      description: |
        Change quantity of item in logged-in user's cart, and updated cart will be returned
      operationId: changeItemQuantity
      produces:
      - application/json
      parameters:
      - name: api_key
        in: header
        required: true
        type: string
      - name: accessToken
        in: query
        required: true
        type: string
      - name: productId
        in: path
        description: Product Id of product to modify (change quantity)
        required: true
        type: string
      responses:
        "200":
          description: successful operation, product quantity modified
          schema:
            $ref: '#/definitions/User'
        "401":
          description: You need to have access to continue
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
      - sunglassesstore_auth:
        - write:itemsInCart
        - read:itemsInCart
    delete:
      tags:
      - User
      summary: Delete product from logged-in user's cart
      description: |
        Deletes an item from authorized user's cart and returns the updated cart
      operationId: deleteItem
      produces:
      - application/json
      parameters:
      - name: api_key
        in: header
        required: true
        type: string
      - name: accessToken
        in: query
        required: true
        type: string
      - name: productId
        in: path
        description: Product Id to delete
        required: true
        type: string
      responses:
        "200":
          description: successful operation, product removed from cart
          schema:
            $ref: '#/definitions/User'
        "401":
          description: You need to have access to continue
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
      - sunglassesstore_auth:
        - write:itemsInCart
        - read:itemsInCart
securityDefinitions:
  sunglassesstore_auth:
    type: oauth2
    authorizationUrl: localhost:3001/api/login
    flow: implicit
    scopes:
      write:itemsInCart: add or modify items in cart in your account
      read:itemsInCart: read items in cart in your account
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Brands:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
  Products:
    type: object
    properties:
      id:
        type: string
      categoryId:
        type: string
      name:
        type: string
      description:
        type: string
      price:
        type: integer
        format: int64
      imageUrls:
        type: array
        items:
          type: string
  User:
    type: object
    properties:
      gender:
        type: string
      cart:
        type: array
        items:
          $ref: '#/definitions/Brands'
      name:
        $ref: '#/definitions/Name'
      location:
        $ref: '#/definitions/Location'
      email:
        type: string
      login:
        $ref: '#/definitions/Login'
      dob:
        type: string
        format: date-time
      registered:
        type: string
        format: date-time
      phone:
        type: string
      cell:
        type: string
      picture:
        $ref: '#/definitions/Picture'
      nat:
        type: string
  Name:
    type: object
    properties:
      title:
        type: string
      first:
        type: string
      last:
        type: string
  Location:
    type: object
    properties:
      street:
        type: string
      city:
        type: string
      state:
        type: string
      postcode:
        type: integer
        format: int64
  Login:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
      salt:
        type: string
      md5:
        type: string
      sha1:
        type: string
      sha256:
        type: string
  Picture:
    type: object
    properties:
      large:
        type: string
      medium:
        type: string
      thumbnail:
        type: string
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
